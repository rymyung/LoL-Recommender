colnames(cos_asm) <- paste0("text", dg_all$index)
rownames(cos_asm) <- paste0("text", dg_all$index)
w2v_asm <- calculate_simil(dg_all$a, n_grams = n_grams, method = "w2v")
colnames(w2v_asm) <- paste0("text", dg_all$index)
rownames(w2v_asm) <- paste0("text", dg_all$index)
base_performance<- data.frame()
weight_selection <- data.frame()
weighted_except <- data.frame()
weighted_all <- data.frame()
p <- progress_estimated(6600)
for (idx in 1:6600) {
question <- dg_all[idx, "q"] # Input question
answer <- dg_all[idx, "a"] # Actual answer
ch <- dg_all[idx, "chapter"] # Input question's chapter
target_idx <- dg_all[idx, "index"]
try({
dg <- dg_all %>% slice(-c(idx)) # Remove input question in dg_all file
cos_a1 <- performance_check(question, answer, ch, target_idx, "cosine") # Recommend answers by cosine
w2v_a1 <- performance_check(question, answer, ch, target_idx, "w2v") # Recommend answers by word2vec
cos_a2 <- performance_check2(question, answer, ch, target_idx, "cosine") # Recommend answers by cosine
w2v_a2 <- performance_check2(question, answer, ch, target_idx, "w2v") # Recommend answers by word2vec
cos_a3 <- performance_check3(question, answer, ch, target_idx, "cosine") # Recommend answers by cosine
w2v_a3 <- performance_check3(question, answer, ch, target_idx, "w2v") # Recommend answers by word2vec
# Random Search
while (T) {
random_idx <- sample(1:nrow(dg_all), 1)
if (random_idx != idx) {
break
}
}
rs_a <- dg_all %>% slice(random_idx) %>% select(q, a, index)
# Merge the result
rs_a$method <- "rs"
rs_a$input_q <- question
rs_a$actual_a <- answer
rs_a$actual_asim <- w2v_asm[paste0("text", rs_a$index), paste0("text", target_idx)]
cos_a1$method <- "cos"
cos_a1$input_q <- question
cos_a1$actual_a <- answer
cos_a2$method <- "cos"
cos_a2$input_q <- question
cos_a2$actual_a <- answer
cos_a3$method <- "cos"
cos_a3$input_q <- question
cos_a3$actual_a <- answer
w2v_a1$method <- "w2v"
w2v_a1$input_q <- question
w2v_a1$actual_a <- answer
w2v_a2$method <- "w2v"
w2v_a2$input_q <- question
w2v_a2$actual_a <- answer
w2v_a3$method <- "w2v"
w2v_a3$input_q <- question
w2v_a3$actual_a <- answer
base_performance <- base_performance %>%
bind_rows(cos_a1 %>% slice(1)) %>%
bind_rows(w2v_a1 %>% slice(1)) %>%
bind_rows(rs_a %>% select(-index))
weighted_except <- weighted_except %>%
bind_rows(cos_a2 %>% slice(1)) %>%
bind_rows(w2v_a2 %>% slice(1)) %>%
bind_rows(rs_a %>% select(-index))
weighted_all <- weighted_all %>%
bind_rows(cos_a3 %>% slice(1)) %>%
bind_rows(w2v_a3 %>% slice(1)) %>%
bind_rows(rs_a %>% select(-index))
weight_selection <- weight_selection %>% bind_rows(w2v_a1)
}, silent = T)
p$tick()$print()
}
base_performance <- base_performance %>%
rename(sq = q, recommended = a) %>%
select(input_q, sq, actual_a, recommended, method, mean_asim, num_filtered_asim, qsim, pr, actual_asim)
weighted_except <- weighted_except %>%
rename(sq = q, recommended = a) %>%
select(input_q, sq, actual_a, recommended, method, mean_asim, num_filtered_asim, qsim, pr, actual_asim)
weighted_all <- weighted_all %>%
rename(sq = q, recommended = a) %>%
select(input_q, sq, actual_a, recommended, method, mean_asim, num_filtered_asim, qsim, pr, actual_asim)
weight_selection <- weight_selection %>%
rename(sq = q, recommended = a) %>%
select(input_q, sq, actual_a, recommended, method, mean_asim, num_filtered_asim, qsim, pr, actual_asim)
# base_performance : 0.2 / 0.3 / 0.5
base.df <- base_performance %>% group_by(method) %>% summarize(performance = mean(actual_asim, na.rm = T));base.df
base_temp <- base_performance %>% filter(!is.na(actual_asim) & !is.na(pr))
cor(base_temp$pr, base_temp$actual_asim)
base_cos <- base_performance %>% filter(method == "cos" & !is.na(actual_asim))
cor(base_cos$pr, base_cos$actual_asim)
base_w2v <- base_performance %>% filter(method == "w2v" & !is.na(actual_asim))
cor(base_w2v$pr, base_w2v$actual_asim)
# selected weight by linear regression except num_filtered_asim : 0.52 / 0 / 0.48
except.df <- weighted_except %>% group_by(method) %>% summarize(performance = mean(actual_asim, na.rm = T)); except.df
weighted_except %>% group_by(method) %>% summarize(performance = mean(actual_asim, na.rm = T)) %>%
ggplot(aes(method, performance, fill = method)) + geom_bar(stat = "identity")
perf2_temp <- weighted_except %>% filter(!is.na(actual_asim) & !is.na(pr))
cor(perf2_temp$pr, perf2_temp$actual_asim)
perf2_cos <- weighted_except %>% filter(method == "cos" & !is.na(actual_asim))
cor(perf2_cos$pr, perf2_cos$actual_asim)
perf2_w2v <- weighted_except %>% filter(method == "w2v" & !is.na(actual_asim))
cor(perf2_w2v$pr, perf2_w2v$actual_asim)
# selected weight by linear regression : 0.46 / 0.04 / 0.5
all.df <- weighted_all %>% group_by(method) %>% summarize(performance = mean(actual_asim, na.rm = T)); all.df
weighted_all %>% group_by(method) %>% summarize(performance = mean(actual_asim, na.rm = T)) %>%
ggplot(aes(method, performance, fill = method)) + geom_bar(stat = "identity")
perf3_temp <- weighted_all %>% filter(!is.na(actual_asim) & !is.na(pr))
cor(perf3_temp$pr, perf3_temp$actual_asim)
perf3_cos <- weighted_all %>% filter(method == "cos" & !is.na(actual_asim))
cor(perf3_cos$pr, perf3_cos$actual_asim)
perf3_w2v <- weighted_all %>% filter(method == "w2v" & !is.na(actual_asim))
cor(perf3_w2v$pr, perf3_w2v$actual_asim)
# Compare correlations
cor.df <- data.frame(weights = c("Base", "selected weights except num_filtered_asim", "selected weights by all"),
both = c(cor(base_temp$pr, base_temp$actual_asim), cor(perf2_temp$pr, perf2_temp$actual_asim), cor(perf3_temp$pr, perf3_temp$actual_asim)),
cos = c(cor(base_cos$pr, base_cos$actual_asim), cor(perf2_cos$pr, perf2_cos$actual_asim), cor(perf3_cos$pr, perf3_cos$actual_asim)),
w2v = c(cor(base_w2v$pr, base_w2v$actual_asim), cor(perf2_w2v$pr, perf2_w2v$actual_asim), cor(perf3_w2v$pr, perf3_w2v$actual_asim))); cor.df
perf.df <- data.frame(weights = c("Base", "selected weights except num_filtered_asim", "selected weights by all"),
rs = c(unlist(base.df[base.df$method == "rs", "performance"]), unlist(except.df[except.df$method == "rs", "performance"]), unlist(all.df[all.df$method == "rs", "performance"])),
cos = c(unlist(base.df[base.df$method == "cos", "performance"]), unlist(except.df[except.df$method == "cos", "performance"]), unlist(all.df[all.df$method == "cos", "performance"])),
w2v = c(unlist(base.df[base.df$method == "w2v", "performance"]), unlist(except.df[except.df$method == "w2v", "performance"]), unlist(all.df[all.df$method == "w2v", "performance"]))); perf.df
perf.df %>%
gather(key = "method", value = "performance", -weights) %>%
ggplot(aes(method, performance, fill = method)) + geom_bar(stat = "identity") +
facet_grid(. ~ weights) +
#scale_x_discrete(c("perf.rs", "perf.cos", "perf.w2v")) +
theme(axis.title.x = element_blank())
# Compare the answer between cosine and word2vec
temp <- weighted_except %>% filter(method != "rs")
compare <- c()
for (i in 1:(nrow(temp)/2)) {
compare <- c(compare, temp$actual_asim[2*i-1] - temp$actual_asim[2*i])
}
candidate <- data.frame()
for (idx in order(compare)) {
candidate <- candidate %>% bind_rows(temp[c(2*idx-1,2*idx),])
}
dim(candidate)
write.csv(candidate, "compare_answers.csv", row.names = F)
dg_all %>% filter(q == "Page 22, Life boat launching area:
")
dg_all %>% filter(q == "Page 22, Life boat launching area:")
dg_all %>% filter(q == "Kindly confirm that duct outlets have been located taking into consideration possible interference of the fire water mist outlets. Ducts could possibly influence the mist-direction of the water spray.")
dg_all %>% filter(q == "Compressed air line drain reservoir below the 2nd deck platform should be extended and have mist catcher as oil comes out from  the vent")
w2v_asm["text2166", "text1988"]
w2v_qsm["text2166", "text1988"]
save.image("C:/Users/Ro_Laptop/Dropbox/Public/project/현대미포조선/2년차/코드/PCRF/System/performance_V3.RData")
x=seq(1,10,length=100)
data=data.frame(x,dnorm(x,mean=6.5,sd=1))
names(data)=c('x','new.data')
x.ribbon=seq(1,10,length=20)
ribbon=data.frame(x.ribbon,
dnorm(x.ribbon,mean=5,sd=1)+.01,
dnorm(x.ribbon,mean=5,sd=1)-.01,
dnorm(x.ribbon,mean=5,sd=1))
names(ribbon)=c('x.ribbon','max','min','avg')
dim(data)
dim(ribbon)
head(data)
head(ribbon)
ggplot()+geom_ribbon(data=ribbon,aes(ymin=min,ymax=max,x=x.ribbon),fill='lightgreen')
library(ggplot2)
ggplot()+geom_ribbon(data=ribbon,aes(ymin=min,ymax=max,x=x.ribbon),fill='lightgreen')+
geom_line(data=ribbon,aes(x=x.ribbon,y=avg),color='black')+
geom_line(data=data,aes(x=x,y=new.data),color='red')+
xlab('x')+ylab('density')
?geom_ribbon
ggplot()+geom_ribbon(data=ribbon,aes(ymin=min,ymax=max,x=x.ribbon),fill='lightgreen')
ggplot()+geom_ribbon(data=ribbon,aes(ymin=min,ymax=max,x=x.ribbon),fill='lightgreen')+
geom_line(data=ribbon,aes(x=x.ribbon,y=avg),color='black')
ggplot()+geom_ribbon(data=ribbon,aes(ymin=min,ymax=max,x=x.ribbon),fill='lightgreen')+
geom_line(data=ribbon,aes(x=x.ribbon,y=avg),color='black') +
geom_line(data=data,aes(x=x,y=new.data),color='red')
ggplot()+geom_ribbon(data=ribbon,aes(ymin=min,ymax=max,x=x.ribbon),fill='lightgreen')+
geom_line(data=ribbon,aes(x=x.ribbon,y=avg),color='black') +
geom_line(data=data,aes(x=x,y=new.data),color='red')+
xlab('x')+ylab('density')
ggplot()+geom_ribbon(data=ribbon,aes(ymin=min,ymax=max,x=x.ribbon,fill='lightgreen'))
ggplot()+geom_ribbon(data=ribbon,aes(ymin=min,ymax=max,x=x.ribbon,fill='lightgreen'))
ggplot()+geom_ribbon(data=ribbon,aes(ymin=min,ymax=max,x=x.ribbon),fill='lightgreen')
ggplot()+geom_ribbon(data=ribbon,aes(ymin=min,ymax=max,x=x.ribbon,fill='lightgreen'))+
geom_line(data=ribbon,aes(x=x.ribbon,y=avg,color='black'))+
geom_line(data=data,aes(x=x,y=new.data,color='red'))+
xlab('x')+ylab('density')
ggplot()+geom_ribbon(data=ribbon,aes(ymin=min,ymax=max,x=x.ribbon,fill='lightgreen'))+
geom_line(data=ribbon,aes(x=x.ribbon,y=avg,color='black'))+
geom_line(data=data,aes(x=x,y=new.data,color='red'))+
xlab('x')+ylab('density') +
scale_fill_identity(name = 'the fill', guide = 'legend',labels = c('m1'))
ggplot()+geom_ribbon(data=ribbon,aes(ymin=min,ymax=max,x=x.ribbon,fill='lightgreen'))+
geom_line(data=ribbon,aes(x=x.ribbon,y=avg,color='black'))+
geom_line(data=data,aes(x=x,y=new.data,color='red'))+
xlab('x')+ylab('density')
ggplot()+geom_ribbon(data=ribbon,aes(ymin=min,ymax=max,x=x.ribbon, fill='lightgreen'))+
geom_line(data=ribbon,aes(x=x.ribbon,y=avg),color='black') +
geom_line(data=data,aes(x=x,y=new.data),color='red')+
xlab('x')+ylab('density')
ggplot()+geom_ribbon(data=ribbon,aes(ymin=min,ymax=max,x=x.ribbon, fill='lightgreen'))
ggplot()+geom_ribbon(data=ribbon,aes(ymin=min,ymax=max,x=x.ribbon,fill='lightgreen'))+
geom_line(data=ribbon,aes(x=x.ribbon,y=avg,color='black'))+
geom_line(data=data,aes(x=x,y=new.data,color='red'))+
xlab('x')+ylab('density')
ggplot()+geom_ribbon(data=ribbon,aes(ymin=min,ymax=max,x=x.ribbon,fill='lightgreen'))+
geom_line(data=ribbon,aes(x=x.ribbon,y=avg,color='black'))+
geom_line(data=data,aes(x=x,y=new.data,color='red'))+
xlab('x')+ylab('density') +
scale_fill_identity(name = 'the fill', guide = 'legend',labels = c('m1'))
load("C:/Users/Ro_Laptop/Dropbox/Public/project/현대미포조선/2년차/코드/PCRF/System/performance_V3.RData")
perf.df
load("C:/Users/Ro_Laptop/Dropbox/Public/project/현대미포조선/2년차/코드/PCRF/System/demo/PCRF_test.RData")
test1 %>% select(a, pr) # Recommeded answer
# Load library
pkgs <- c("dplyr", "stringr", "quanteda", "scales", "h2o", "tm", "ggplot2")
sapply(pkgs, require, character.only = T)
test1 %>% select(a, pr) # Recommeded answer
write.csv(test1 %>% select(a, pr), "test1.csv", row.names = F)
write.csv(test2 %>% select(a, pr), "test2.csv", row.names = F)
write.csv(test3 %>% select(a, pr), "test3.csv", row.names = F)
write.csv(test4 %>% select(a, pr), "test4.csv", row.names = F)
test2 %>% select(a, pr) # Recommeded answer
a2 <- dg %>% filter(q == q2) %>% select(a) %>% slice(1); a2 # Actual answer
head(dg)
dg[4,]
# Case 4
q4 <- "Bilge overboard valve(29V) shall be provide lock device with pad lock."
dg[4,'chapter']
# Case 4
q4 <- "Bilge overboard valve(29V) shall be provide lock device with pad lock."
ch4 <- "bilge ballast, fire & wash deck system"
test4 <- recommend_a(q4, ch4)
# Initialize h2o
h2o.init()
test4 <- recommend_a(q4, ch4)
test4 %>% select(a, pr) # Recommeded answer
a4 <- dg %>% filter(q == q4) %>% select(a) %>% slice(1); a4 # Actual answer
test4 %>% mutate(a = a %>% str_remove_all("\\n")) %>% select(a, pr) # Recommeded answer
?trim
trim(test4$a)
?whitespace
??whitespace
stripWhitespace(test4$a)
test1 %>% mutate(a = stripWhitespace(a)) %>% select(a, pr) # Recommeded answer
View(test1)
a1 <- dg %>% filter(q == q1) %>% select(a) %>% slice(1); a1 # Actual answer
a1 <- dg %>% filter(q == q1) %>% select(a) %>% slice(1); a1 # Actual answer
library(RMySQL)
install.packages("RMySQL")
library(RMySQL)
con <- dbConnect(MySQL(), user = "rymyung", password = "adfea2@sfgrs",
dbname = "LoL", host = "127.0.0.1")
con <- dbConnect(MySQL(), user = "Ro_MySQL", password = "adfea2@sfgrs",
dbname = "LoL", host = "127.0.0.1")
con <- dbConnect(MySQL(), user = "rymyung", password = "adfea2@sfgrs",
dbname = "Ro_MySQL", host = "127.0.0.1")
?MySQL()
?MySQL()
MySQL()
con <- dbConnect(MySQL(), user = "rymyung", password = "adfea2@sfgrs",
dbname = "Ro_MySQL", host = "localhost")
con <- dbConnect(MySQL(), user = "rymyung", password = "",
dbname = "Ro_MySQL", host = "localhost")
con <- dbConnect(MySQL(), user = "rymyung", password = "adfea2@sfgrs",
dbname = "Ro_MySQL", host = "127.0.0.1")
con <- dbConnect(MySQL(), user = "rymyung", password = "adfea2@sfgrs",
dbname = "", host = "127.0.0.1")
con <- dbConnect(MySQL(), user = "rymyung", password = "adfea2@sfgrs",
dbname = "lol", host = "127.0.0.1")
con <- dbConnect(MySQL(), user = "root", password = "adfea2@sfgrs",
dbname = "lol", host = "localhost")
dbListTables(con)
dbGetQuery(con, "select * from user")
a <- dbGetQuery(con, "select * from user")
class(a)
head(a)
?dbGetQuery
a <- dbGetQuery(con, "select * from user")
head(a)
# Set working directory
setwd("C:/Users/Ro_Laptop/Dropbox/Public/공부/github/LoL-Recommender")
# Load libraries
pkgs <- c("dplyr")
sapply(pkgs, require, character.only = T)
user <- read.csv("Data/crawled_data_opgg/user.csv", stringsAsFactors = F)
head(user)
user  <- read.csv("Data/crawled_data_opgg/user.csv", stringsAsFactors = F)
most7 <- read.csv("Data/crawled_data_opgg/most7.csv", stringsAsFactors = F)
head(user)
most7
head(user)
head(most7)
play <- read.csv("Data/crawled_data_api/play.csv", stringsAsFactors = F)
# Load data
user <- read.csv("Data/crawled_data_api/user.csv", stringsAsFactors = F)
most <- read.csv("Data/crawled_data_api/most7.csv", stringsAsFactors = F)
play <- read.csv("Data/crawled_data_api/play.csv", stringsAsFactors = F)
head(user)
head(most)
head(play)
play %>% group_by(gameId) %>% summarize(n_obs = n())
play %>% group_by(gameId) %>% summarize(n_obs = n()) %>% filter(n_obs != 10)
play %>% group_by(gameId) %>% summarize(n_obs = n()) %>% nrow()
nrow(play)
play %>% slice(10)
play %>% slice(1:10)
play %>% slice(11:20)
play %>% slice(1:10)
# Load libraries
pkgs <- c("dplyr", "tidyr")
sapply(pkgs, require, character.only = T)
play %>% slice(1:10) %>% spread(key = accountId, value = champId)
play %>% slice(1:10) %>% spread(key = c(accountId, team, kill, death, assist, dealing), value = champId)
play %>% slice(1:10)
play %>% slice(1:10) %>% select(gameId, accountId, champId)
play %>% slice(1:10) %>% select(gameId, accountId, champId) %>% spread(key = champId, value = accountId)
play %>% slice(1:10) %>% select(gameId, champId)
play %>% slice(1:10) %>% select(gameId, champId) %>% t()
play %>% slice(1:10) %>% select(gameId, champId) %>% t() %>% class()
play %>% slice(1:10)
play %>% filter(accountId == 207486324)
play %>% filter(accountId == 207486324) %>% group_by(champId) %>% summarize(n_obs = n(),
mean_kill = mean(kill),
mean_death = mean(death),
mean_assist = mean(assist),
mean_dealing = mean(dealing),
mean_damaged = mean(damaged))
play %>% filter(accountId == 207486324) %>% group_by(champId) %>% summarize(n_obs = n(),
mean_kill = mean(kill),
mean_death = mean(death),
mean_assist = mean(assist),
mean_dealing = mean(dealing),
mean_damaged = mean(damaged)) %>%
arrange(desc(n_obs))
play %>% filter(accountId == 207486324) %>% group_by(champId) %>% summarize(n_obs = n(),
mean_kill = mean(kill),
mean_death = mean(death),
mean_assist = mean(assist),
mean_dealing = mean(dealing),
mean_damaged = mean(damaged)) %>%
arrange(desc(n_obs)) %>% ungroup()
champ <- read.csv("Data/crawled_data_api/champ.csv", stringsAsFactors = F)
head(champ)
play %>% filter(accountId == 207486324) %>% group_by(champId) %>% summarize(n_obs = n(),
mean_kill = mean(kill),
mean_death = mean(death),
mean_assist = mean(assist),
mean_dealing = mean(dealing),
mean_damaged = mean(damaged)) %>%
arrange(desc(n_obs)) %>% ungroup() %>% left_join(champ %>% select(champId, champName), by = "champId")
play %>% filter(accountId == 207486324) %>% group_by(champId) %>% summarize(n_obs = n(),
mean_kill = mean(kill),
mean_death = mean(death),
mean_assist = mean(assist),
mean_dealing = mean(dealing),
mean_damaged = mean(damaged)) %>%
arrange(desc(n_obs)) %>% ungroup() %>% left_join(champ %>% select(champId, champName), by = "champId") %>%
View()
head(most)
most %>% filter(accountId == 207486324)
play %>% filter(accountId == 208788053) %>% group_by(champId) %>% summarize(n_obs = n(),
mean_kill = mean(kill),
mean_death = mean(death),
mean_assist = mean(assist),
mean_dealing = mean(dealing),
mean_damaged = mean(damaged)) %>%
arrange(desc(n_obs)) %>% ungroup() %>% left_join(champ %>% select(champId, champName), by = "champId") %>%
View()
most %>% filter(accountId == 208788053)
most %>% filter(accountId == 208788053) %>% left_join(champ %>% select(champId, champName), by = "champId")
most %>% filter(accountId == 208788053) %>% left_join(champ %>% select(champId, champName), by = "champId") %>% select(champName, everything())
play %>% slice(1:10)
play %>% slice(1:10) %>% left_join(champ, by = "champId")
play %>% filter(accountId == 208788053) %>%
group_by(champId) %>% summarize(n_obs = n(),
mean_kill = mean(kill),
mean_death = mean(death),
mean_assist = mean(assist),
mean_dealing = mean(dealing),
mean_damaged = mean(damaged)) %>%
arrange(desc(n_obs)) %>% ungroup() %>%
left_join(champ %>% select(champId, champName), by = "champId")
play %>% filter(accountId == 208788053) %>%
group_by(champId) %>% summarize(n_obs = n(),
mean_kill = mean(kill),
mean_death = mean(death),
mean_assist = mean(assist),
mean_dealing = mean(dealing),
mean_damaged = mean(damaged)) %>%
arrange(desc(n_obs)) %>% ungroup() %>%
left_join(champ %>% select(champId, champName), by = "champId")
play %>% filter(champId == 34)
# Load libraries
pkgs <- c("dplyr", "tidyr", "ggplot2")
sapply(pkgs, require, character.only = T)
play %>% filter(champId == 34) %>%
ggplot() + geom_density(aes(kill))
play %>% filter(champId == 34) %>%
ggplot() + geom_density(aes(kill), fill = "steelblue", alpha = 0.3)
play %>% filter(champId == 34) %>%
ggplot() + geom_density(aes(kill, fill = "kill"), alpha = 0.3) +
geom_density(aes(death, fill = "death"), alpha = 0.3) +
geom_density(aes(assist, fill = "assist"), alpha = 0.3) +
scale_fill_manual(name = "Type",
value = c("kill" = "darkorange",
"death" = "steelblue",
"assist" = "palegreen3"))
play %>% filter(champId == 34) %>%
ggplot() + geom_density(aes(kill, fill = "kill"), alpha = 0.3) +
geom_density(aes(death, fill = "death"), alpha = 0.3) +
geom_density(aes(assist, fill = "assist"), alpha = 0.3) +
scale_fill_manual(name = "Type",
values = c("kill" = "darkorange",
"death" = "steelblue",
"assist" = "palegreen3"))
head(champ)
head(champ, 20)
play %>% filter(champId %in% c(164, 34, 201)) %>%
ggplot() + geom_density(aes(kill, fill = "kill"), alpha = 0.3) +
geom_density(aes(death, fill = "death"), alpha = 0.3) +
geom_density(aes(assist, fill = "assist"), alpha = 0.3) +
scale_fill_manual(name = "Type",
values = c("kill" = "darkorange",
"death" = "steelblue",
"assist" = "palegreen3")) +
facet_grid(champId ~ .)
play %>% filter(champId %in% c(164, 34, 201)) %>%
ggplot() + geom_density(aes(kill, fill = "kill"), alpha = 0.3) +
geom_density(aes(death, fill = "death"), alpha = 0.3) +
geom_density(aes(assist, fill = "assist"), alpha = 0.3) +
scale_fill_manual(name = "Type",
values = c("kill" = "darkorange",
"death" = "steelblue",
"assist" = "palegreen3")) +
facet_grid(. ~ champId)
head(champ, 20)
play %>% filter(champId %in% c(69, 201)) %>%
ggplot() + geom_density(aes(kill, fill = "kill"), alpha = 0.3) +
geom_density(aes(death, fill = "death"), alpha = 0.3) +
geom_density(aes(assist, fill = "assist"), alpha = 0.3) +
scale_fill_manual(name = "Type",
values = c("kill" = "darkorange",
"death" = "steelblue",
"assist" = "palegreen3")) +
facet_grid(. ~ champId)
head(play)
play %>% left_join(champ, by champId) %>% head()
play %>% left_join(champ, by = "champId") %>% head()
play %>% left_join(champ, by = "champId") %>%
gplot() + geom_density(aes(kill, fill = "kill"), alpha = 0.3) +
geom_density(aes(death, fill = "death"), alpha = 0.3) +
geom_density(aes(assist, fill = "assist"), alpha = 0.3) +
scale_fill_manual(name = "Type",
values = c("kill" = "darkorange",
"death" = "steelblue",
"assist" = "palegreen3")) +
facet_grid(. ~ position1)
play %>% left_join(champ, by = "champId") %>%
ggplot() + geom_density(aes(kill, fill = "kill"), alpha = 0.3) +
geom_density(aes(death, fill = "death"), alpha = 0.3) +
geom_density(aes(assist, fill = "assist"), alpha = 0.3) +
scale_fill_manual(name = "Type",
values = c("kill" = "darkorange",
"death" = "steelblue",
"assist" = "palegreen3")) +
facet_grid(. ~ position1)
play %>% left_join(champ, by = "champId") %>%
gather(key = "Type", value = "Value", kill, death, assist) %>% head()
play %>% left_join(champ, by = "champId") %>%
gather(key = "Type", value = "Value", kill, death, assist) %>%
ggplot() + geom_density(aes(value), alpha = 0.3)
play %>% left_join(champ, by = "champId") %>%
gather(key = "Type", value = "Value", kill, death, assist) %>%
ggplot() + geom_density(aes(Value), alpha = 0.3)
play %>% left_join(champ, by = "champId") %>%
gather(key = "Type", value = "Value", kill, death, assist) %>%
ggplot() + geom_density(aes(Value, fill = Type), alpha = 0.3) +
facet_grid(Type ~ position1)
play %>% left_join(champ, by = "champId") %>%
ggplot() + geom_density(aes(kill, fill = "kill"), alpha = 0.3) +
geom_density(aes(death, fill = "death"), alpha = 0.3) +
geom_density(aes(assist, fill = "assist"), alpha = 0.3) +
scale_fill_manual(name = "Type",
values = c("kill" = "darkorange",
"death" = "steelblue",
"assist" = "palegreen3")) +
facet_grid(. ~ position1)
play %>% filter(champId %in% c(69, 201)) %>%
ggplot() + geom_density(aes(kill, fill = "kill"), alpha = 0.3) +
geom_density(aes(death, fill = "death"), alpha = 0.3) +
geom_density(aes(assist, fill = "assist"), alpha = 0.3) +
scale_fill_manual(name = "Type",
values = c("kill" = "darkorange",
"death" = "steelblue",
"assist" = "palegreen3")) +
facet_grid(. ~ champId)
play %>% filter(accountId == 208788053) %>%
group_by(champId) %>% summarize(n_obs = n(),
mean_kill = mean(kill),
mean_death = mean(death),
mean_assist = mean(assist),
mean_dealing = mean(dealing),
mean_damaged = mean(damaged)) %>%
arrange(desc(n_obs)) %>% ungroup() %>%
left_join(champ %>% select(champId, champName), by = "champId")
head(most)
head(play)
play %>% filter(champId %in% c(69, 201)) %>%
ggplot() + geom_density(aes(kill, fill = "kill"), alpha = 0.3) +
geom_density(aes(death, fill = "death"), alpha = 0.3) +
geom_density(aes(assist, fill = "assist"), alpha = 0.3) +
scale_fill_manual(name = "Type",
values = c("kill" = "darkorange",
"death" = "steelblue",
"assist" = "palegreen3")) +
facet_grid(. ~ champId)
